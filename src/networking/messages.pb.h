// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
class CClientHelloMsg;
struct CClientHelloMsgDefaultTypeInternal;
extern CClientHelloMsgDefaultTypeInternal _CClientHelloMsg_default_instance_;
class CLoadoutChangedMsg;
struct CLoadoutChangedMsgDefaultTypeInternal;
extern CLoadoutChangedMsgDefaultTypeInternal _CLoadoutChangedMsg_default_instance_;
class CMultiplexedMsg;
struct CMultiplexedMsgDefaultTypeInternal;
extern CMultiplexedMsgDefaultTypeInternal _CMultiplexedMsg_default_instance_;
class CProtobufMsgHdr;
struct CProtobufMsgHdrDefaultTypeInternal;
extern CProtobufMsgHdrDefaultTypeInternal _CProtobufMsgHdr_default_instance_;
class CServerHelloMsg;
struct CServerHelloMsgDefaultTypeInternal;
extern CServerHelloMsgDefaultTypeInternal _CServerHelloMsg_default_instance_;
class CSystemMessageMsg;
struct CSystemMessageMsgDefaultTypeInternal;
extern CSystemMessageMsgDefaultTypeInternal _CSystemMessageMsg_default_instance_;
class CUpdateInventoryMsg;
struct CUpdateInventoryMsgDefaultTypeInternal;
extern CUpdateInventoryMsgDefaultTypeInternal _CUpdateInventoryMsg_default_instance_;
class CUpdateItemSchemaMsg;
struct CUpdateItemSchemaMsgDefaultTypeInternal;
extern CUpdateItemSchemaMsgDefaultTypeInternal _CUpdateItemSchemaMsg_default_instance_;
class CUpdateLoadoutMsg;
struct CUpdateLoadoutMsgDefaultTypeInternal;
extern CUpdateLoadoutMsgDefaultTypeInternal _CUpdateLoadoutMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CClientHelloMsg* Arena::CreateMaybeMessage<::CClientHelloMsg>(Arena*);
template<> ::CLoadoutChangedMsg* Arena::CreateMaybeMessage<::CLoadoutChangedMsg>(Arena*);
template<> ::CMultiplexedMsg* Arena::CreateMaybeMessage<::CMultiplexedMsg>(Arena*);
template<> ::CProtobufMsgHdr* Arena::CreateMaybeMessage<::CProtobufMsgHdr>(Arena*);
template<> ::CServerHelloMsg* Arena::CreateMaybeMessage<::CServerHelloMsg>(Arena*);
template<> ::CSystemMessageMsg* Arena::CreateMaybeMessage<::CSystemMessageMsg>(Arena*);
template<> ::CUpdateInventoryMsg* Arena::CreateMaybeMessage<::CUpdateInventoryMsg>(Arena*);
template<> ::CUpdateItemSchemaMsg* Arena::CreateMaybeMessage<::CUpdateItemSchemaMsg>(Arena*);
template<> ::CUpdateLoadoutMsg* Arena::CreateMaybeMessage<::CUpdateLoadoutMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EBaseMsg : int {
  k_EInvalidMsg = 0,
  k_EClientHelloMsg = 1,
  k_EServerHelloMsg = 2,
  k_EMultiplexedMsg = 5,
  k_ESystemMessageMsg = 10,
  k_EBaseMsg_Max = 50
};
bool EBaseMsg_IsValid(int value);
constexpr EBaseMsg EBaseMsg_MIN = k_EInvalidMsg;
constexpr EBaseMsg EBaseMsg_MAX = k_EBaseMsg_Max;
constexpr int EBaseMsg_ARRAYSIZE = EBaseMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBaseMsg_descriptor();
template<typename T>
inline const std::string& EBaseMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBaseMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBaseMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBaseMsg_descriptor(), enum_t_value);
}
inline bool EBaseMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBaseMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBaseMsg>(
    EBaseMsg_descriptor(), name, value);
}
enum EEconSystemMsg : int {
  k_EUpdateItemSchemaMsg = 50,
  k_EUpdateInventoryMsg = 51,
  k_ELoadoutChangedMsg = 52
};
bool EEconSystemMsg_IsValid(int value);
constexpr EEconSystemMsg EEconSystemMsg_MIN = k_EUpdateItemSchemaMsg;
constexpr EEconSystemMsg EEconSystemMsg_MAX = k_ELoadoutChangedMsg;
constexpr int EEconSystemMsg_ARRAYSIZE = EEconSystemMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EEconSystemMsg_descriptor();
template<typename T>
inline const std::string& EEconSystemMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EEconSystemMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EEconSystemMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EEconSystemMsg_descriptor(), enum_t_value);
}
inline bool EEconSystemMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EEconSystemMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EEconSystemMsg>(
    EEconSystemMsg_descriptor(), name, value);
}
// ===================================================================

class CProtobufMsgHdr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CProtobufMsgHdr) */ {
 public:
  inline CProtobufMsgHdr() : CProtobufMsgHdr(nullptr) {}
  ~CProtobufMsgHdr() override;
  explicit PROTOBUF_CONSTEXPR CProtobufMsgHdr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CProtobufMsgHdr(const CProtobufMsgHdr& from);
  CProtobufMsgHdr(CProtobufMsgHdr&& from) noexcept
    : CProtobufMsgHdr() {
    *this = ::std::move(from);
  }

  inline CProtobufMsgHdr& operator=(const CProtobufMsgHdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline CProtobufMsgHdr& operator=(CProtobufMsgHdr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CProtobufMsgHdr& default_instance() {
    return *internal_default_instance();
  }
  static inline const CProtobufMsgHdr* internal_default_instance() {
    return reinterpret_cast<const CProtobufMsgHdr*>(
               &_CProtobufMsgHdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CProtobufMsgHdr& a, CProtobufMsgHdr& b) {
    a.Swap(&b);
  }
  inline void Swap(CProtobufMsgHdr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CProtobufMsgHdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CProtobufMsgHdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CProtobufMsgHdr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CProtobufMsgHdr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CProtobufMsgHdr& from) {
    CProtobufMsgHdr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CProtobufMsgHdr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CProtobufMsgHdr";
  }
  protected:
  explicit CProtobufMsgHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionFieldNumber = 1,
    kProtocolTypeFieldNumber = 2,
    kSourceMessageIdFieldNumber = 4,
    kTargetMessageIdFieldNumber = 5,
  };
  // required uint32 protocol_version = 1;
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  uint32_t protocol_version() const;
  void set_protocol_version(uint32_t value);
  private:
  uint32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(uint32_t value);
  public:

  // optional uint32 protocol_type = 2;
  bool has_protocol_type() const;
  private:
  bool _internal_has_protocol_type() const;
  public:
  void clear_protocol_type();
  uint32_t protocol_type() const;
  void set_protocol_type(uint32_t value);
  private:
  uint32_t _internal_protocol_type() const;
  void _internal_set_protocol_type(uint32_t value);
  public:

  // optional fixed64 source_message_id = 4;
  bool has_source_message_id() const;
  private:
  bool _internal_has_source_message_id() const;
  public:
  void clear_source_message_id();
  uint64_t source_message_id() const;
  void set_source_message_id(uint64_t value);
  private:
  uint64_t _internal_source_message_id() const;
  void _internal_set_source_message_id(uint64_t value);
  public:

  // optional fixed64 target_message_id = 5;
  bool has_target_message_id() const;
  private:
  bool _internal_has_target_message_id() const;
  public:
  void clear_target_message_id();
  uint64_t target_message_id() const;
  void set_target_message_id(uint64_t value);
  private:
  uint64_t _internal_target_message_id() const;
  void _internal_set_target_message_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CProtobufMsgHdr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t protocol_version_;
    uint32_t protocol_type_;
    uint64_t source_message_id_;
    uint64_t target_message_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CClientHelloMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientHelloMsg) */ {
 public:
  inline CClientHelloMsg() : CClientHelloMsg(nullptr) {}
  ~CClientHelloMsg() override;
  explicit PROTOBUF_CONSTEXPR CClientHelloMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientHelloMsg(const CClientHelloMsg& from);
  CClientHelloMsg(CClientHelloMsg&& from) noexcept
    : CClientHelloMsg() {
    *this = ::std::move(from);
  }

  inline CClientHelloMsg& operator=(const CClientHelloMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientHelloMsg& operator=(CClientHelloMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientHelloMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientHelloMsg* internal_default_instance() {
    return reinterpret_cast<const CClientHelloMsg*>(
               &_CClientHelloMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CClientHelloMsg& a, CClientHelloMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientHelloMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientHelloMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientHelloMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientHelloMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientHelloMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CClientHelloMsg& from) {
    CClientHelloMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientHelloMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientHelloMsg";
  }
  protected:
  explicit CClientHelloMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteSteamidFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // required fixed64 remote_steamid = 2;
  bool has_remote_steamid() const;
  private:
  bool _internal_has_remote_steamid() const;
  public:
  void clear_remote_steamid();
  uint64_t remote_steamid() const;
  void set_remote_steamid(uint64_t value);
  private:
  uint64_t _internal_remote_steamid() const;
  void _internal_set_remote_steamid(uint64_t value);
  public:

  // required uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientHelloMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t remote_steamid_;
    uint32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CServerHelloMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CServerHelloMsg) */ {
 public:
  inline CServerHelloMsg() : CServerHelloMsg(nullptr) {}
  ~CServerHelloMsg() override;
  explicit PROTOBUF_CONSTEXPR CServerHelloMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CServerHelloMsg(const CServerHelloMsg& from);
  CServerHelloMsg(CServerHelloMsg&& from) noexcept
    : CServerHelloMsg() {
    *this = ::std::move(from);
  }

  inline CServerHelloMsg& operator=(const CServerHelloMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CServerHelloMsg& operator=(CServerHelloMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CServerHelloMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CServerHelloMsg* internal_default_instance() {
    return reinterpret_cast<const CServerHelloMsg*>(
               &_CServerHelloMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CServerHelloMsg& a, CServerHelloMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CServerHelloMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CServerHelloMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CServerHelloMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CServerHelloMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CServerHelloMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CServerHelloMsg& from) {
    CServerHelloMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CServerHelloMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CServerHelloMsg";
  }
  protected:
  explicit CServerHelloMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteSteamidFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // required fixed64 remote_steamid = 2;
  bool has_remote_steamid() const;
  private:
  bool _internal_has_remote_steamid() const;
  public:
  void clear_remote_steamid();
  uint64_t remote_steamid() const;
  void set_remote_steamid(uint64_t value);
  private:
  uint64_t _internal_remote_steamid() const;
  void _internal_set_remote_steamid(uint64_t value);
  public:

  // required uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CServerHelloMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t remote_steamid_;
    uint32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CMultiplexedMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMultiplexedMsg) */ {
 public:
  inline CMultiplexedMsg() : CMultiplexedMsg(nullptr) {}
  ~CMultiplexedMsg() override;
  explicit PROTOBUF_CONSTEXPR CMultiplexedMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMultiplexedMsg(const CMultiplexedMsg& from);
  CMultiplexedMsg(CMultiplexedMsg&& from) noexcept
    : CMultiplexedMsg() {
    *this = ::std::move(from);
  }

  inline CMultiplexedMsg& operator=(const CMultiplexedMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMultiplexedMsg& operator=(CMultiplexedMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMultiplexedMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMultiplexedMsg* internal_default_instance() {
    return reinterpret_cast<const CMultiplexedMsg*>(
               &_CMultiplexedMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMultiplexedMsg& a, CMultiplexedMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CMultiplexedMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMultiplexedMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMultiplexedMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMultiplexedMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMultiplexedMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMultiplexedMsg& from) {
    CMultiplexedMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMultiplexedMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMultiplexedMsg";
  }
  protected:
  explicit CMultiplexedMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidsFieldNumber = 3,
    kPayloadFieldNumber = 2,
    kMsgtypeFieldNumber = 1,
  };
  // repeated fixed64 steamids = 3;
  int steamids_size() const;
  private:
  int _internal_steamids_size() const;
  public:
  void clear_steamids();
  private:
  uint64_t _internal_steamids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steamids() const;
  void _internal_add_steamids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steamids();
  public:
  uint64_t steamids(int index) const;
  void set_steamids(int index, uint64_t value);
  void add_steamids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steamids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steamids();

  // optional bytes payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional uint32 msgtype = 1;
  bool has_msgtype() const;
  private:
  bool _internal_has_msgtype() const;
  public:
  void clear_msgtype();
  uint32_t msgtype() const;
  void set_msgtype(uint32_t value);
  private:
  uint32_t _internal_msgtype() const;
  void _internal_set_msgtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMultiplexedMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steamids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    uint32_t msgtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CSystemMessageMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSystemMessageMsg) */ {
 public:
  inline CSystemMessageMsg() : CSystemMessageMsg(nullptr) {}
  ~CSystemMessageMsg() override;
  explicit PROTOBUF_CONSTEXPR CSystemMessageMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSystemMessageMsg(const CSystemMessageMsg& from);
  CSystemMessageMsg(CSystemMessageMsg&& from) noexcept
    : CSystemMessageMsg() {
    *this = ::std::move(from);
  }

  inline CSystemMessageMsg& operator=(const CSystemMessageMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSystemMessageMsg& operator=(CSystemMessageMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSystemMessageMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSystemMessageMsg* internal_default_instance() {
    return reinterpret_cast<const CSystemMessageMsg*>(
               &_CSystemMessageMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSystemMessageMsg& a, CSystemMessageMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CSystemMessageMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSystemMessageMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSystemMessageMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSystemMessageMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSystemMessageMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSystemMessageMsg& from) {
    CSystemMessageMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSystemMessageMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSystemMessageMsg";
  }
  protected:
  explicit CSystemMessageMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:CSystemMessageMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CUpdateItemSchemaMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUpdateItemSchemaMsg) */ {
 public:
  inline CUpdateItemSchemaMsg() : CUpdateItemSchemaMsg(nullptr) {}
  ~CUpdateItemSchemaMsg() override;
  explicit PROTOBUF_CONSTEXPR CUpdateItemSchemaMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUpdateItemSchemaMsg(const CUpdateItemSchemaMsg& from);
  CUpdateItemSchemaMsg(CUpdateItemSchemaMsg&& from) noexcept
    : CUpdateItemSchemaMsg() {
    *this = ::std::move(from);
  }

  inline CUpdateItemSchemaMsg& operator=(const CUpdateItemSchemaMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUpdateItemSchemaMsg& operator=(CUpdateItemSchemaMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUpdateItemSchemaMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUpdateItemSchemaMsg* internal_default_instance() {
    return reinterpret_cast<const CUpdateItemSchemaMsg*>(
               &_CUpdateItemSchemaMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CUpdateItemSchemaMsg& a, CUpdateItemSchemaMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CUpdateItemSchemaMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUpdateItemSchemaMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUpdateItemSchemaMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUpdateItemSchemaMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUpdateItemSchemaMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CUpdateItemSchemaMsg& from) {
    CUpdateItemSchemaMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUpdateItemSchemaMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUpdateItemSchemaMsg";
  }
  protected:
  explicit CUpdateItemSchemaMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsDataFieldNumber = 1,
    kItemsGameHashFieldNumber = 2,
    kItemsGameUrlFieldNumber = 3,
    kUseOnlineBackupFieldNumber = 4,
  };
  // optional bytes items_data = 1;
  bool has_items_data() const;
  private:
  bool _internal_has_items_data() const;
  public:
  void clear_items_data();
  const std::string& items_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_items_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_items_data();
  PROTOBUF_NODISCARD std::string* release_items_data();
  void set_allocated_items_data(std::string* items_data);
  private:
  const std::string& _internal_items_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_items_data(const std::string& value);
  std::string* _internal_mutable_items_data();
  public:

  // optional string items_game_hash = 2;
  bool has_items_game_hash() const;
  private:
  bool _internal_has_items_game_hash() const;
  public:
  void clear_items_game_hash();
  const std::string& items_game_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_items_game_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_items_game_hash();
  PROTOBUF_NODISCARD std::string* release_items_game_hash();
  void set_allocated_items_game_hash(std::string* items_game_hash);
  private:
  const std::string& _internal_items_game_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_items_game_hash(const std::string& value);
  std::string* _internal_mutable_items_game_hash();
  public:

  // optional string items_game_url = 3;
  bool has_items_game_url() const;
  private:
  bool _internal_has_items_game_url() const;
  public:
  void clear_items_game_url();
  const std::string& items_game_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_items_game_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_items_game_url();
  PROTOBUF_NODISCARD std::string* release_items_game_url();
  void set_allocated_items_game_url(std::string* items_game_url);
  private:
  const std::string& _internal_items_game_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_items_game_url(const std::string& value);
  std::string* _internal_mutable_items_game_url();
  public:

  // optional bool use_online_backup = 4 [default = false];
  bool has_use_online_backup() const;
  private:
  bool _internal_has_use_online_backup() const;
  public:
  void clear_use_online_backup();
  bool use_online_backup() const;
  void set_use_online_backup(bool value);
  private:
  bool _internal_use_online_backup() const;
  void _internal_set_use_online_backup(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CUpdateItemSchemaMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr items_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr items_game_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr items_game_url_;
    bool use_online_backup_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CUpdateLoadoutMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUpdateLoadoutMsg) */ {
 public:
  inline CUpdateLoadoutMsg() : CUpdateLoadoutMsg(nullptr) {}
  ~CUpdateLoadoutMsg() override;
  explicit PROTOBUF_CONSTEXPR CUpdateLoadoutMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUpdateLoadoutMsg(const CUpdateLoadoutMsg& from);
  CUpdateLoadoutMsg(CUpdateLoadoutMsg&& from) noexcept
    : CUpdateLoadoutMsg() {
    *this = ::std::move(from);
  }

  inline CUpdateLoadoutMsg& operator=(const CUpdateLoadoutMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUpdateLoadoutMsg& operator=(CUpdateLoadoutMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUpdateLoadoutMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUpdateLoadoutMsg* internal_default_instance() {
    return reinterpret_cast<const CUpdateLoadoutMsg*>(
               &_CUpdateLoadoutMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CUpdateLoadoutMsg& a, CUpdateLoadoutMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CUpdateLoadoutMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUpdateLoadoutMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUpdateLoadoutMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUpdateLoadoutMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUpdateLoadoutMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CUpdateLoadoutMsg& from) {
    CUpdateLoadoutMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUpdateLoadoutMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUpdateLoadoutMsg";
  }
  protected:
  explicit CUpdateLoadoutMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryFieldNumber = 2,
    kClassIdFieldNumber = 1,
  };
  // repeated bytes inventory = 2;
  int inventory_size() const;
  private:
  int _internal_inventory_size() const;
  public:
  void clear_inventory();
  const std::string& inventory(int index) const;
  std::string* mutable_inventory(int index);
  void set_inventory(int index, const std::string& value);
  void set_inventory(int index, std::string&& value);
  void set_inventory(int index, const char* value);
  void set_inventory(int index, const void* value, size_t size);
  std::string* add_inventory();
  void add_inventory(const std::string& value);
  void add_inventory(std::string&& value);
  void add_inventory(const char* value);
  void add_inventory(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inventory() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inventory();
  private:
  const std::string& _internal_inventory(int index) const;
  std::string* _internal_add_inventory();
  public:

  // required fixed32 class_id = 1;
  bool has_class_id() const;
  private:
  bool _internal_has_class_id() const;
  public:
  void clear_class_id();
  uint32_t class_id() const;
  void set_class_id(uint32_t value);
  private:
  uint32_t _internal_class_id() const;
  void _internal_set_class_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUpdateLoadoutMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inventory_;
    uint32_t class_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CUpdateInventoryMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUpdateInventoryMsg) */ {
 public:
  inline CUpdateInventoryMsg() : CUpdateInventoryMsg(nullptr) {}
  ~CUpdateInventoryMsg() override;
  explicit PROTOBUF_CONSTEXPR CUpdateInventoryMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUpdateInventoryMsg(const CUpdateInventoryMsg& from);
  CUpdateInventoryMsg(CUpdateInventoryMsg&& from) noexcept
    : CUpdateInventoryMsg() {
    *this = ::std::move(from);
  }

  inline CUpdateInventoryMsg& operator=(const CUpdateInventoryMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUpdateInventoryMsg& operator=(CUpdateInventoryMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUpdateInventoryMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUpdateInventoryMsg* internal_default_instance() {
    return reinterpret_cast<const CUpdateInventoryMsg*>(
               &_CUpdateInventoryMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CUpdateInventoryMsg& a, CUpdateInventoryMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CUpdateInventoryMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUpdateInventoryMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUpdateInventoryMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUpdateInventoryMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUpdateInventoryMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CUpdateInventoryMsg& from) {
    CUpdateInventoryMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUpdateInventoryMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUpdateInventoryMsg";
  }
  protected:
  explicit CUpdateInventoryMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryFieldNumber = 1,
  };
  // repeated .CUpdateLoadoutMsg inventory = 1;
  int inventory_size() const;
  private:
  int _internal_inventory_size() const;
  public:
  void clear_inventory();
  ::CUpdateLoadoutMsg* mutable_inventory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUpdateLoadoutMsg >*
      mutable_inventory();
  private:
  const ::CUpdateLoadoutMsg& _internal_inventory(int index) const;
  ::CUpdateLoadoutMsg* _internal_add_inventory();
  public:
  const ::CUpdateLoadoutMsg& inventory(int index) const;
  ::CUpdateLoadoutMsg* add_inventory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUpdateLoadoutMsg >&
      inventory() const;

  // @@protoc_insertion_point(class_scope:CUpdateInventoryMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUpdateLoadoutMsg > inventory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CLoadoutChangedMsg final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CLoadoutChangedMsg) */ {
 public:
  inline CLoadoutChangedMsg() : CLoadoutChangedMsg(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CLoadoutChangedMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLoadoutChangedMsg(const CLoadoutChangedMsg& from);
  CLoadoutChangedMsg(CLoadoutChangedMsg&& from) noexcept
    : CLoadoutChangedMsg() {
    *this = ::std::move(from);
  }

  inline CLoadoutChangedMsg& operator=(const CLoadoutChangedMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLoadoutChangedMsg& operator=(CLoadoutChangedMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLoadoutChangedMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLoadoutChangedMsg* internal_default_instance() {
    return reinterpret_cast<const CLoadoutChangedMsg*>(
               &_CLoadoutChangedMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CLoadoutChangedMsg& a, CLoadoutChangedMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CLoadoutChangedMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLoadoutChangedMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLoadoutChangedMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLoadoutChangedMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CLoadoutChangedMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CLoadoutChangedMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLoadoutChangedMsg";
  }
  protected:
  explicit CLoadoutChangedMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CLoadoutChangedMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CProtobufMsgHdr

// required uint32 protocol_version = 1;
inline bool CProtobufMsgHdr::_internal_has_protocol_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CProtobufMsgHdr::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void CProtobufMsgHdr::clear_protocol_version() {
  _impl_.protocol_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CProtobufMsgHdr::_internal_protocol_version() const {
  return _impl_.protocol_version_;
}
inline uint32_t CProtobufMsgHdr::protocol_version() const {
  // @@protoc_insertion_point(field_get:CProtobufMsgHdr.protocol_version)
  return _internal_protocol_version();
}
inline void CProtobufMsgHdr::_internal_set_protocol_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.protocol_version_ = value;
}
inline void CProtobufMsgHdr::set_protocol_version(uint32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:CProtobufMsgHdr.protocol_version)
}

// optional uint32 protocol_type = 2;
inline bool CProtobufMsgHdr::_internal_has_protocol_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CProtobufMsgHdr::has_protocol_type() const {
  return _internal_has_protocol_type();
}
inline void CProtobufMsgHdr::clear_protocol_type() {
  _impl_.protocol_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CProtobufMsgHdr::_internal_protocol_type() const {
  return _impl_.protocol_type_;
}
inline uint32_t CProtobufMsgHdr::protocol_type() const {
  // @@protoc_insertion_point(field_get:CProtobufMsgHdr.protocol_type)
  return _internal_protocol_type();
}
inline void CProtobufMsgHdr::_internal_set_protocol_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.protocol_type_ = value;
}
inline void CProtobufMsgHdr::set_protocol_type(uint32_t value) {
  _internal_set_protocol_type(value);
  // @@protoc_insertion_point(field_set:CProtobufMsgHdr.protocol_type)
}

// optional fixed64 source_message_id = 4;
inline bool CProtobufMsgHdr::_internal_has_source_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CProtobufMsgHdr::has_source_message_id() const {
  return _internal_has_source_message_id();
}
inline void CProtobufMsgHdr::clear_source_message_id() {
  _impl_.source_message_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CProtobufMsgHdr::_internal_source_message_id() const {
  return _impl_.source_message_id_;
}
inline uint64_t CProtobufMsgHdr::source_message_id() const {
  // @@protoc_insertion_point(field_get:CProtobufMsgHdr.source_message_id)
  return _internal_source_message_id();
}
inline void CProtobufMsgHdr::_internal_set_source_message_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_message_id_ = value;
}
inline void CProtobufMsgHdr::set_source_message_id(uint64_t value) {
  _internal_set_source_message_id(value);
  // @@protoc_insertion_point(field_set:CProtobufMsgHdr.source_message_id)
}

// optional fixed64 target_message_id = 5;
inline bool CProtobufMsgHdr::_internal_has_target_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CProtobufMsgHdr::has_target_message_id() const {
  return _internal_has_target_message_id();
}
inline void CProtobufMsgHdr::clear_target_message_id() {
  _impl_.target_message_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CProtobufMsgHdr::_internal_target_message_id() const {
  return _impl_.target_message_id_;
}
inline uint64_t CProtobufMsgHdr::target_message_id() const {
  // @@protoc_insertion_point(field_get:CProtobufMsgHdr.target_message_id)
  return _internal_target_message_id();
}
inline void CProtobufMsgHdr::_internal_set_target_message_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.target_message_id_ = value;
}
inline void CProtobufMsgHdr::set_target_message_id(uint64_t value) {
  _internal_set_target_message_id(value);
  // @@protoc_insertion_point(field_set:CProtobufMsgHdr.target_message_id)
}

// -------------------------------------------------------------------

// CClientHelloMsg

// required uint32 version = 1;
inline bool CClientHelloMsg::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientHelloMsg::has_version() const {
  return _internal_has_version();
}
inline void CClientHelloMsg::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CClientHelloMsg::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CClientHelloMsg::version() const {
  // @@protoc_insertion_point(field_get:CClientHelloMsg.version)
  return _internal_version();
}
inline void CClientHelloMsg::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_ = value;
}
inline void CClientHelloMsg::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CClientHelloMsg.version)
}

// required fixed64 remote_steamid = 2;
inline bool CClientHelloMsg::_internal_has_remote_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientHelloMsg::has_remote_steamid() const {
  return _internal_has_remote_steamid();
}
inline void CClientHelloMsg::clear_remote_steamid() {
  _impl_.remote_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CClientHelloMsg::_internal_remote_steamid() const {
  return _impl_.remote_steamid_;
}
inline uint64_t CClientHelloMsg::remote_steamid() const {
  // @@protoc_insertion_point(field_get:CClientHelloMsg.remote_steamid)
  return _internal_remote_steamid();
}
inline void CClientHelloMsg::_internal_set_remote_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.remote_steamid_ = value;
}
inline void CClientHelloMsg::set_remote_steamid(uint64_t value) {
  _internal_set_remote_steamid(value);
  // @@protoc_insertion_point(field_set:CClientHelloMsg.remote_steamid)
}

// -------------------------------------------------------------------

// CServerHelloMsg

// required uint32 version = 1;
inline bool CServerHelloMsg::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CServerHelloMsg::has_version() const {
  return _internal_has_version();
}
inline void CServerHelloMsg::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CServerHelloMsg::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CServerHelloMsg::version() const {
  // @@protoc_insertion_point(field_get:CServerHelloMsg.version)
  return _internal_version();
}
inline void CServerHelloMsg::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_ = value;
}
inline void CServerHelloMsg::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CServerHelloMsg.version)
}

// required fixed64 remote_steamid = 2;
inline bool CServerHelloMsg::_internal_has_remote_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CServerHelloMsg::has_remote_steamid() const {
  return _internal_has_remote_steamid();
}
inline void CServerHelloMsg::clear_remote_steamid() {
  _impl_.remote_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CServerHelloMsg::_internal_remote_steamid() const {
  return _impl_.remote_steamid_;
}
inline uint64_t CServerHelloMsg::remote_steamid() const {
  // @@protoc_insertion_point(field_get:CServerHelloMsg.remote_steamid)
  return _internal_remote_steamid();
}
inline void CServerHelloMsg::_internal_set_remote_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.remote_steamid_ = value;
}
inline void CServerHelloMsg::set_remote_steamid(uint64_t value) {
  _internal_set_remote_steamid(value);
  // @@protoc_insertion_point(field_set:CServerHelloMsg.remote_steamid)
}

// -------------------------------------------------------------------

// CMultiplexedMsg

// optional uint32 msgtype = 1;
inline bool CMultiplexedMsg::_internal_has_msgtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMultiplexedMsg::has_msgtype() const {
  return _internal_has_msgtype();
}
inline void CMultiplexedMsg::clear_msgtype() {
  _impl_.msgtype_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMultiplexedMsg::_internal_msgtype() const {
  return _impl_.msgtype_;
}
inline uint32_t CMultiplexedMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:CMultiplexedMsg.msgtype)
  return _internal_msgtype();
}
inline void CMultiplexedMsg::_internal_set_msgtype(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.msgtype_ = value;
}
inline void CMultiplexedMsg::set_msgtype(uint32_t value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:CMultiplexedMsg.msgtype)
}

// optional bytes payload = 2;
inline bool CMultiplexedMsg::_internal_has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMultiplexedMsg::has_payload() const {
  return _internal_has_payload();
}
inline void CMultiplexedMsg::clear_payload() {
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMultiplexedMsg::payload() const {
  // @@protoc_insertion_point(field_get:CMultiplexedMsg.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMultiplexedMsg::set_payload(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMultiplexedMsg.payload)
}
inline std::string* CMultiplexedMsg::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:CMultiplexedMsg.payload)
  return _s;
}
inline const std::string& CMultiplexedMsg::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void CMultiplexedMsg::_internal_set_payload(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* CMultiplexedMsg::_internal_mutable_payload() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* CMultiplexedMsg::release_payload() {
  // @@protoc_insertion_point(field_release:CMultiplexedMsg.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.payload_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMultiplexedMsg::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMultiplexedMsg.payload)
}

// repeated fixed64 steamids = 3;
inline int CMultiplexedMsg::_internal_steamids_size() const {
  return _impl_.steamids_.size();
}
inline int CMultiplexedMsg::steamids_size() const {
  return _internal_steamids_size();
}
inline void CMultiplexedMsg::clear_steamids() {
  _impl_.steamids_.Clear();
}
inline uint64_t CMultiplexedMsg::_internal_steamids(int index) const {
  return _impl_.steamids_.Get(index);
}
inline uint64_t CMultiplexedMsg::steamids(int index) const {
  // @@protoc_insertion_point(field_get:CMultiplexedMsg.steamids)
  return _internal_steamids(index);
}
inline void CMultiplexedMsg::set_steamids(int index, uint64_t value) {
  _impl_.steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMultiplexedMsg.steamids)
}
inline void CMultiplexedMsg::_internal_add_steamids(uint64_t value) {
  _impl_.steamids_.Add(value);
}
inline void CMultiplexedMsg::add_steamids(uint64_t value) {
  _internal_add_steamids(value);
  // @@protoc_insertion_point(field_add:CMultiplexedMsg.steamids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMultiplexedMsg::_internal_steamids() const {
  return _impl_.steamids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMultiplexedMsg::steamids() const {
  // @@protoc_insertion_point(field_list:CMultiplexedMsg.steamids)
  return _internal_steamids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMultiplexedMsg::_internal_mutable_steamids() {
  return &_impl_.steamids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMultiplexedMsg::mutable_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CMultiplexedMsg.steamids)
  return _internal_mutable_steamids();
}

// -------------------------------------------------------------------

// CSystemMessageMsg

// optional string message = 1;
inline bool CSystemMessageMsg::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSystemMessageMsg::has_message() const {
  return _internal_has_message();
}
inline void CSystemMessageMsg::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSystemMessageMsg::message() const {
  // @@protoc_insertion_point(field_get:CSystemMessageMsg.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSystemMessageMsg::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSystemMessageMsg.message)
}
inline std::string* CSystemMessageMsg::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CSystemMessageMsg.message)
  return _s;
}
inline const std::string& CSystemMessageMsg::_internal_message() const {
  return _impl_.message_.Get();
}
inline void CSystemMessageMsg::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* CSystemMessageMsg::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* CSystemMessageMsg::release_message() {
  // @@protoc_insertion_point(field_release:CSystemMessageMsg.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSystemMessageMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSystemMessageMsg.message)
}

// -------------------------------------------------------------------

// CUpdateItemSchemaMsg

// optional bytes items_data = 1;
inline bool CUpdateItemSchemaMsg::_internal_has_items_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUpdateItemSchemaMsg::has_items_data() const {
  return _internal_has_items_data();
}
inline void CUpdateItemSchemaMsg::clear_items_data() {
  _impl_.items_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUpdateItemSchemaMsg::items_data() const {
  // @@protoc_insertion_point(field_get:CUpdateItemSchemaMsg.items_data)
  return _internal_items_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUpdateItemSchemaMsg::set_items_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.items_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUpdateItemSchemaMsg.items_data)
}
inline std::string* CUpdateItemSchemaMsg::mutable_items_data() {
  std::string* _s = _internal_mutable_items_data();
  // @@protoc_insertion_point(field_mutable:CUpdateItemSchemaMsg.items_data)
  return _s;
}
inline const std::string& CUpdateItemSchemaMsg::_internal_items_data() const {
  return _impl_.items_data_.Get();
}
inline void CUpdateItemSchemaMsg::_internal_set_items_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.items_data_.Set(value, GetArenaForAllocation());
}
inline std::string* CUpdateItemSchemaMsg::_internal_mutable_items_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.items_data_.Mutable(GetArenaForAllocation());
}
inline std::string* CUpdateItemSchemaMsg::release_items_data() {
  // @@protoc_insertion_point(field_release:CUpdateItemSchemaMsg.items_data)
  if (!_internal_has_items_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.items_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.items_data_.IsDefault()) {
    _impl_.items_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUpdateItemSchemaMsg::set_allocated_items_data(std::string* items_data) {
  if (items_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.items_data_.SetAllocated(items_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.items_data_.IsDefault()) {
    _impl_.items_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUpdateItemSchemaMsg.items_data)
}

// optional string items_game_hash = 2;
inline bool CUpdateItemSchemaMsg::_internal_has_items_game_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUpdateItemSchemaMsg::has_items_game_hash() const {
  return _internal_has_items_game_hash();
}
inline void CUpdateItemSchemaMsg::clear_items_game_hash() {
  _impl_.items_game_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CUpdateItemSchemaMsg::items_game_hash() const {
  // @@protoc_insertion_point(field_get:CUpdateItemSchemaMsg.items_game_hash)
  return _internal_items_game_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUpdateItemSchemaMsg::set_items_game_hash(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.items_game_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUpdateItemSchemaMsg.items_game_hash)
}
inline std::string* CUpdateItemSchemaMsg::mutable_items_game_hash() {
  std::string* _s = _internal_mutable_items_game_hash();
  // @@protoc_insertion_point(field_mutable:CUpdateItemSchemaMsg.items_game_hash)
  return _s;
}
inline const std::string& CUpdateItemSchemaMsg::_internal_items_game_hash() const {
  return _impl_.items_game_hash_.Get();
}
inline void CUpdateItemSchemaMsg::_internal_set_items_game_hash(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.items_game_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* CUpdateItemSchemaMsg::_internal_mutable_items_game_hash() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.items_game_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* CUpdateItemSchemaMsg::release_items_game_hash() {
  // @@protoc_insertion_point(field_release:CUpdateItemSchemaMsg.items_game_hash)
  if (!_internal_has_items_game_hash()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.items_game_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.items_game_hash_.IsDefault()) {
    _impl_.items_game_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUpdateItemSchemaMsg::set_allocated_items_game_hash(std::string* items_game_hash) {
  if (items_game_hash != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.items_game_hash_.SetAllocated(items_game_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.items_game_hash_.IsDefault()) {
    _impl_.items_game_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUpdateItemSchemaMsg.items_game_hash)
}

// optional string items_game_url = 3;
inline bool CUpdateItemSchemaMsg::_internal_has_items_game_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUpdateItemSchemaMsg::has_items_game_url() const {
  return _internal_has_items_game_url();
}
inline void CUpdateItemSchemaMsg::clear_items_game_url() {
  _impl_.items_game_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CUpdateItemSchemaMsg::items_game_url() const {
  // @@protoc_insertion_point(field_get:CUpdateItemSchemaMsg.items_game_url)
  return _internal_items_game_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUpdateItemSchemaMsg::set_items_game_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.items_game_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUpdateItemSchemaMsg.items_game_url)
}
inline std::string* CUpdateItemSchemaMsg::mutable_items_game_url() {
  std::string* _s = _internal_mutable_items_game_url();
  // @@protoc_insertion_point(field_mutable:CUpdateItemSchemaMsg.items_game_url)
  return _s;
}
inline const std::string& CUpdateItemSchemaMsg::_internal_items_game_url() const {
  return _impl_.items_game_url_.Get();
}
inline void CUpdateItemSchemaMsg::_internal_set_items_game_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.items_game_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CUpdateItemSchemaMsg::_internal_mutable_items_game_url() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.items_game_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CUpdateItemSchemaMsg::release_items_game_url() {
  // @@protoc_insertion_point(field_release:CUpdateItemSchemaMsg.items_game_url)
  if (!_internal_has_items_game_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.items_game_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.items_game_url_.IsDefault()) {
    _impl_.items_game_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUpdateItemSchemaMsg::set_allocated_items_game_url(std::string* items_game_url) {
  if (items_game_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.items_game_url_.SetAllocated(items_game_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.items_game_url_.IsDefault()) {
    _impl_.items_game_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUpdateItemSchemaMsg.items_game_url)
}

// optional bool use_online_backup = 4 [default = false];
inline bool CUpdateItemSchemaMsg::_internal_has_use_online_backup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CUpdateItemSchemaMsg::has_use_online_backup() const {
  return _internal_has_use_online_backup();
}
inline void CUpdateItemSchemaMsg::clear_use_online_backup() {
  _impl_.use_online_backup_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CUpdateItemSchemaMsg::_internal_use_online_backup() const {
  return _impl_.use_online_backup_;
}
inline bool CUpdateItemSchemaMsg::use_online_backup() const {
  // @@protoc_insertion_point(field_get:CUpdateItemSchemaMsg.use_online_backup)
  return _internal_use_online_backup();
}
inline void CUpdateItemSchemaMsg::_internal_set_use_online_backup(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.use_online_backup_ = value;
}
inline void CUpdateItemSchemaMsg::set_use_online_backup(bool value) {
  _internal_set_use_online_backup(value);
  // @@protoc_insertion_point(field_set:CUpdateItemSchemaMsg.use_online_backup)
}

// -------------------------------------------------------------------

// CUpdateLoadoutMsg

// required fixed32 class_id = 1;
inline bool CUpdateLoadoutMsg::_internal_has_class_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUpdateLoadoutMsg::has_class_id() const {
  return _internal_has_class_id();
}
inline void CUpdateLoadoutMsg::clear_class_id() {
  _impl_.class_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CUpdateLoadoutMsg::_internal_class_id() const {
  return _impl_.class_id_;
}
inline uint32_t CUpdateLoadoutMsg::class_id() const {
  // @@protoc_insertion_point(field_get:CUpdateLoadoutMsg.class_id)
  return _internal_class_id();
}
inline void CUpdateLoadoutMsg::_internal_set_class_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.class_id_ = value;
}
inline void CUpdateLoadoutMsg::set_class_id(uint32_t value) {
  _internal_set_class_id(value);
  // @@protoc_insertion_point(field_set:CUpdateLoadoutMsg.class_id)
}

// repeated bytes inventory = 2;
inline int CUpdateLoadoutMsg::_internal_inventory_size() const {
  return _impl_.inventory_.size();
}
inline int CUpdateLoadoutMsg::inventory_size() const {
  return _internal_inventory_size();
}
inline void CUpdateLoadoutMsg::clear_inventory() {
  _impl_.inventory_.Clear();
}
inline std::string* CUpdateLoadoutMsg::add_inventory() {
  std::string* _s = _internal_add_inventory();
  // @@protoc_insertion_point(field_add_mutable:CUpdateLoadoutMsg.inventory)
  return _s;
}
inline const std::string& CUpdateLoadoutMsg::_internal_inventory(int index) const {
  return _impl_.inventory_.Get(index);
}
inline const std::string& CUpdateLoadoutMsg::inventory(int index) const {
  // @@protoc_insertion_point(field_get:CUpdateLoadoutMsg.inventory)
  return _internal_inventory(index);
}
inline std::string* CUpdateLoadoutMsg::mutable_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:CUpdateLoadoutMsg.inventory)
  return _impl_.inventory_.Mutable(index);
}
inline void CUpdateLoadoutMsg::set_inventory(int index, const std::string& value) {
  _impl_.inventory_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CUpdateLoadoutMsg.inventory)
}
inline void CUpdateLoadoutMsg::set_inventory(int index, std::string&& value) {
  _impl_.inventory_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CUpdateLoadoutMsg.inventory)
}
inline void CUpdateLoadoutMsg::set_inventory(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inventory_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CUpdateLoadoutMsg.inventory)
}
inline void CUpdateLoadoutMsg::set_inventory(int index, const void* value, size_t size) {
  _impl_.inventory_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CUpdateLoadoutMsg.inventory)
}
inline std::string* CUpdateLoadoutMsg::_internal_add_inventory() {
  return _impl_.inventory_.Add();
}
inline void CUpdateLoadoutMsg::add_inventory(const std::string& value) {
  _impl_.inventory_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CUpdateLoadoutMsg.inventory)
}
inline void CUpdateLoadoutMsg::add_inventory(std::string&& value) {
  _impl_.inventory_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CUpdateLoadoutMsg.inventory)
}
inline void CUpdateLoadoutMsg::add_inventory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inventory_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CUpdateLoadoutMsg.inventory)
}
inline void CUpdateLoadoutMsg::add_inventory(const void* value, size_t size) {
  _impl_.inventory_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CUpdateLoadoutMsg.inventory)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CUpdateLoadoutMsg::inventory() const {
  // @@protoc_insertion_point(field_list:CUpdateLoadoutMsg.inventory)
  return _impl_.inventory_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CUpdateLoadoutMsg::mutable_inventory() {
  // @@protoc_insertion_point(field_mutable_list:CUpdateLoadoutMsg.inventory)
  return &_impl_.inventory_;
}

// -------------------------------------------------------------------

// CUpdateInventoryMsg

// repeated .CUpdateLoadoutMsg inventory = 1;
inline int CUpdateInventoryMsg::_internal_inventory_size() const {
  return _impl_.inventory_.size();
}
inline int CUpdateInventoryMsg::inventory_size() const {
  return _internal_inventory_size();
}
inline void CUpdateInventoryMsg::clear_inventory() {
  _impl_.inventory_.Clear();
}
inline ::CUpdateLoadoutMsg* CUpdateInventoryMsg::mutable_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:CUpdateInventoryMsg.inventory)
  return _impl_.inventory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUpdateLoadoutMsg >*
CUpdateInventoryMsg::mutable_inventory() {
  // @@protoc_insertion_point(field_mutable_list:CUpdateInventoryMsg.inventory)
  return &_impl_.inventory_;
}
inline const ::CUpdateLoadoutMsg& CUpdateInventoryMsg::_internal_inventory(int index) const {
  return _impl_.inventory_.Get(index);
}
inline const ::CUpdateLoadoutMsg& CUpdateInventoryMsg::inventory(int index) const {
  // @@protoc_insertion_point(field_get:CUpdateInventoryMsg.inventory)
  return _internal_inventory(index);
}
inline ::CUpdateLoadoutMsg* CUpdateInventoryMsg::_internal_add_inventory() {
  return _impl_.inventory_.Add();
}
inline ::CUpdateLoadoutMsg* CUpdateInventoryMsg::add_inventory() {
  ::CUpdateLoadoutMsg* _add = _internal_add_inventory();
  // @@protoc_insertion_point(field_add:CUpdateInventoryMsg.inventory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUpdateLoadoutMsg >&
CUpdateInventoryMsg::inventory() const {
  // @@protoc_insertion_point(field_list:CUpdateInventoryMsg.inventory)
  return _impl_.inventory_;
}

// -------------------------------------------------------------------

// CLoadoutChangedMsg

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EBaseMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EBaseMsg>() {
  return ::EBaseMsg_descriptor();
}
template <> struct is_proto_enum< ::EEconSystemMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EEconSystemMsg>() {
  return ::EEconSystemMsg_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
