// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CProtobufMsgHdr::CProtobufMsgHdr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.protocol_version_)*/0u
  , /*decltype(_impl_.protocol_type_)*/0u
  , /*decltype(_impl_.source_message_id_)*/uint64_t{0u}
  , /*decltype(_impl_.target_message_id_)*/uint64_t{0u}} {}
struct CProtobufMsgHdrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CProtobufMsgHdrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CProtobufMsgHdrDefaultTypeInternal() {}
  union {
    CProtobufMsgHdr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CProtobufMsgHdrDefaultTypeInternal _CProtobufMsgHdr_default_instance_;
PROTOBUF_CONSTEXPR CClientHelloMsg::CClientHelloMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.remote_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0u} {}
struct CClientHelloMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CClientHelloMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CClientHelloMsgDefaultTypeInternal() {}
  union {
    CClientHelloMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CClientHelloMsgDefaultTypeInternal _CClientHelloMsg_default_instance_;
PROTOBUF_CONSTEXPR CServerHelloMsg::CServerHelloMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.remote_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0u} {}
struct CServerHelloMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CServerHelloMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CServerHelloMsgDefaultTypeInternal() {}
  union {
    CServerHelloMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CServerHelloMsgDefaultTypeInternal _CServerHelloMsg_default_instance_;
PROTOBUF_CONSTEXPR CMultiplexedMsg::CMultiplexedMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamids_)*/{}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgtype_)*/0u} {}
struct CMultiplexedMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMultiplexedMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMultiplexedMsgDefaultTypeInternal() {}
  union {
    CMultiplexedMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMultiplexedMsgDefaultTypeInternal _CMultiplexedMsg_default_instance_;
PROTOBUF_CONSTEXPR CSystemMessageMsg::CSystemMessageMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CSystemMessageMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSystemMessageMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSystemMessageMsgDefaultTypeInternal() {}
  union {
    CSystemMessageMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSystemMessageMsgDefaultTypeInternal _CSystemMessageMsg_default_instance_;
PROTOBUF_CONSTEXPR CUpdateItemSchemaMsg::CUpdateItemSchemaMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.items_game_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.items_game_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.use_online_backup_)*/false} {}
struct CUpdateItemSchemaMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CUpdateItemSchemaMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CUpdateItemSchemaMsgDefaultTypeInternal() {}
  union {
    CUpdateItemSchemaMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CUpdateItemSchemaMsgDefaultTypeInternal _CUpdateItemSchemaMsg_default_instance_;
PROTOBUF_CONSTEXPR CUpdateLoadoutMsg::CUpdateLoadoutMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.inventory_)*/{}
  , /*decltype(_impl_.class_id_)*/0u} {}
struct CUpdateLoadoutMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CUpdateLoadoutMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CUpdateLoadoutMsgDefaultTypeInternal() {}
  union {
    CUpdateLoadoutMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CUpdateLoadoutMsgDefaultTypeInternal _CUpdateLoadoutMsg_default_instance_;
PROTOBUF_CONSTEXPR CUpdateInventoryMsg::CUpdateInventoryMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inventory_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CUpdateInventoryMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CUpdateInventoryMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CUpdateInventoryMsgDefaultTypeInternal() {}
  union {
    CUpdateInventoryMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CUpdateInventoryMsgDefaultTypeInternal _CUpdateInventoryMsg_default_instance_;
PROTOBUF_CONSTEXPR CLoadoutChangedMsg::CLoadoutChangedMsg(
    ::_pbi::ConstantInitialized) {}
struct CLoadoutChangedMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLoadoutChangedMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLoadoutChangedMsgDefaultTypeInternal() {}
  union {
    CLoadoutChangedMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLoadoutChangedMsgDefaultTypeInternal _CLoadoutChangedMsg_default_instance_;
static ::_pb::Metadata file_level_metadata_messages_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CProtobufMsgHdr, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtobufMsgHdr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CProtobufMsgHdr, _impl_.protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CProtobufMsgHdr, _impl_.protocol_type_),
  PROTOBUF_FIELD_OFFSET(::CProtobufMsgHdr, _impl_.source_message_id_),
  PROTOBUF_FIELD_OFFSET(::CProtobufMsgHdr, _impl_.target_message_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CClientHelloMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientHelloMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientHelloMsg, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CClientHelloMsg, _impl_.remote_steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CServerHelloMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CServerHelloMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CServerHelloMsg, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CServerHelloMsg, _impl_.remote_steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMultiplexedMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMultiplexedMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMultiplexedMsg, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::CMultiplexedMsg, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::CMultiplexedMsg, _impl_.steamids_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSystemMessageMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSystemMessageMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSystemMessageMsg, _impl_.message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUpdateItemSchemaMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUpdateItemSchemaMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CUpdateItemSchemaMsg, _impl_.items_data_),
  PROTOBUF_FIELD_OFFSET(::CUpdateItemSchemaMsg, _impl_.items_game_hash_),
  PROTOBUF_FIELD_OFFSET(::CUpdateItemSchemaMsg, _impl_.items_game_url_),
  PROTOBUF_FIELD_OFFSET(::CUpdateItemSchemaMsg, _impl_.use_online_backup_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CUpdateLoadoutMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUpdateLoadoutMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CUpdateLoadoutMsg, _impl_.class_id_),
  PROTOBUF_FIELD_OFFSET(::CUpdateLoadoutMsg, _impl_.inventory_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CUpdateInventoryMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CUpdateInventoryMsg, _impl_.inventory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CLoadoutChangedMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CProtobufMsgHdr)},
  { 14, 22, -1, sizeof(::CClientHelloMsg)},
  { 24, 32, -1, sizeof(::CServerHelloMsg)},
  { 34, 43, -1, sizeof(::CMultiplexedMsg)},
  { 46, 53, -1, sizeof(::CSystemMessageMsg)},
  { 54, 64, -1, sizeof(::CUpdateItemSchemaMsg)},
  { 68, 76, -1, sizeof(::CUpdateLoadoutMsg)},
  { 78, -1, -1, sizeof(::CUpdateInventoryMsg)},
  { 85, -1, -1, sizeof(::CLoadoutChangedMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CProtobufMsgHdr_default_instance_._instance,
  &::_CClientHelloMsg_default_instance_._instance,
  &::_CServerHelloMsg_default_instance_._instance,
  &::_CMultiplexedMsg_default_instance_._instance,
  &::_CSystemMessageMsg_default_instance_._instance,
  &::_CUpdateItemSchemaMsg_default_instance_._instance,
  &::_CUpdateLoadoutMsg_default_instance_._instance,
  &::_CUpdateInventoryMsg_default_instance_._instance,
  &::_CLoadoutChangedMsg_default_instance_._instance,
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\"x\n\017CProtobufMsgHdr\022\030\n\020p"
  "rotocol_version\030\001 \002(\r\022\025\n\rprotocol_type\030\002"
  " \001(\r\022\031\n\021source_message_id\030\004 \001(\006\022\031\n\021targe"
  "t_message_id\030\005 \001(\006\":\n\017CClientHelloMsg\022\017\n"
  "\007version\030\001 \002(\r\022\026\n\016remote_steamid\030\002 \002(\006\":"
  "\n\017CServerHelloMsg\022\017\n\007version\030\001 \002(\r\022\026\n\016re"
  "mote_steamid\030\002 \002(\006\"E\n\017CMultiplexedMsg\022\017\n"
  "\007msgtype\030\001 \001(\r\022\017\n\007payload\030\002 \001(\014\022\020\n\010steam"
  "ids\030\003 \003(\006\"$\n\021CSystemMessageMsg\022\017\n\007messag"
  "e\030\001 \001(\t\"}\n\024CUpdateItemSchemaMsg\022\022\n\nitems"
  "_data\030\001 \001(\014\022\027\n\017items_game_hash\030\002 \001(\t\022\026\n\016"
  "items_game_url\030\003 \001(\t\022 \n\021use_online_backu"
  "p\030\004 \001(\010:\005false\"8\n\021CUpdateLoadoutMsg\022\020\n\010c"
  "lass_id\030\001 \002(\007\022\021\n\tinventory\030\002 \003(\014\"<\n\023CUpd"
  "ateInventoryMsg\022%\n\tinventory\030\001 \003(\0132\022.CUp"
  "dateLoadoutMsg\"\024\n\022CLoadoutChangedMsg*\217\001\n"
  "\010EBaseMsg\022\021\n\rk_EInvalidMsg\020\000\022\025\n\021k_EClien"
  "tHelloMsg\020\001\022\025\n\021k_EServerHelloMsg\020\002\022\025\n\021k_"
  "EMultiplexedMsg\020\005\022\027\n\023k_ESystemMessageMsg"
  "\020\n\022\022\n\016k_EBaseMsg_Max\0202*a\n\016EEconSystemMsg"
  "\022\032\n\026k_EUpdateItemSchemaMsg\0202\022\031\n\025k_EUpdat"
  "eInventoryMsg\0203\022\030\n\024k_ELoadoutChangedMsg\020"
  "4B\005H\001\200\001\000"
  ;
static ::_pbi::once_flag descriptor_table_messages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_2eproto = {
    false, false, 888, descriptor_table_protodef_messages_2eproto,
    "messages.proto",
    &descriptor_table_messages_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
    file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto,
    file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBaseMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool EBaseMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 10:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EEconSystemMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool EEconSystemMsg_IsValid(int value) {
  switch (value) {
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CProtobufMsgHdr::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtobufMsgHdr>()._impl_._has_bits_);
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_protocol_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CProtobufMsgHdr::CProtobufMsgHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CProtobufMsgHdr)
}
CProtobufMsgHdr::CProtobufMsgHdr(const CProtobufMsgHdr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CProtobufMsgHdr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.protocol_version_){}
    , decltype(_impl_.protocol_type_){}
    , decltype(_impl_.source_message_id_){}
    , decltype(_impl_.target_message_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.protocol_version_, &from._impl_.protocol_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_message_id_) -
    reinterpret_cast<char*>(&_impl_.protocol_version_)) + sizeof(_impl_.target_message_id_));
  // @@protoc_insertion_point(copy_constructor:CProtobufMsgHdr)
}

inline void CProtobufMsgHdr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.protocol_version_){0u}
    , decltype(_impl_.protocol_type_){0u}
    , decltype(_impl_.source_message_id_){uint64_t{0u}}
    , decltype(_impl_.target_message_id_){uint64_t{0u}}
  };
}

CProtobufMsgHdr::~CProtobufMsgHdr() {
  // @@protoc_insertion_point(destructor:CProtobufMsgHdr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CProtobufMsgHdr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CProtobufMsgHdr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CProtobufMsgHdr::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtobufMsgHdr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.protocol_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.target_message_id_) -
        reinterpret_cast<char*>(&_impl_.protocol_version_)) + sizeof(_impl_.target_message_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtobufMsgHdr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_protocol_version(&has_bits);
          _impl_.protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 protocol_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_protocol_type(&has_bits);
          _impl_.protocol_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 source_message_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_source_message_id(&has_bits);
          _impl_.source_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 target_message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_target_message_id(&has_bits);
          _impl_.target_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CProtobufMsgHdr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtobufMsgHdr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 protocol_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocol_version(), target);
  }

  // optional uint32 protocol_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_protocol_type(), target);
  }

  // optional fixed64 source_message_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_source_message_id(), target);
  }

  // optional fixed64 target_message_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_target_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtobufMsgHdr)
  return target;
}

size_t CProtobufMsgHdr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtobufMsgHdr)
  size_t total_size = 0;

  // required uint32 protocol_version = 1;
  if (_internal_has_protocol_version()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_protocol_version());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 protocol_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_protocol_type());
    }

    // optional fixed64 source_message_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 target_message_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CProtobufMsgHdr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CProtobufMsgHdr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CProtobufMsgHdr::GetClassData() const { return &_class_data_; }


void CProtobufMsgHdr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CProtobufMsgHdr*>(&to_msg);
  auto& from = static_cast<const CProtobufMsgHdr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CProtobufMsgHdr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.protocol_type_ = from._impl_.protocol_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_message_id_ = from._impl_.source_message_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_message_id_ = from._impl_.target_message_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CProtobufMsgHdr::CopyFrom(const CProtobufMsgHdr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtobufMsgHdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtobufMsgHdr::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CProtobufMsgHdr::InternalSwap(CProtobufMsgHdr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtobufMsgHdr, _impl_.target_message_id_)
      + sizeof(CProtobufMsgHdr::_impl_.target_message_id_)
      - PROTOBUF_FIELD_OFFSET(CProtobufMsgHdr, _impl_.protocol_version_)>(
          reinterpret_cast<char*>(&_impl_.protocol_version_),
          reinterpret_cast<char*>(&other->_impl_.protocol_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtobufMsgHdr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class CClientHelloMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientHelloMsg>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CClientHelloMsg::CClientHelloMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CClientHelloMsg)
}
CClientHelloMsg::CClientHelloMsg(const CClientHelloMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CClientHelloMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_steamid_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.remote_steamid_, &from._impl_.remote_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.remote_steamid_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:CClientHelloMsg)
}

inline void CClientHelloMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_steamid_){uint64_t{0u}}
    , decltype(_impl_.version_){0u}
  };
}

CClientHelloMsg::~CClientHelloMsg() {
  // @@protoc_insertion_point(destructor:CClientHelloMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CClientHelloMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientHelloMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CClientHelloMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientHelloMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.remote_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.remote_steamid_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientHelloMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required fixed64 remote_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_remote_steamid(&has_bits);
          _impl_.remote_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientHelloMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientHelloMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // required fixed64 remote_steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_remote_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientHelloMsg)
  return target;
}

size_t CClientHelloMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CClientHelloMsg)
  size_t total_size = 0;

  if (_internal_has_remote_steamid()) {
    // required fixed64 remote_steamid = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_version()) {
    // required uint32 version = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return total_size;
}
size_t CClientHelloMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientHelloMsg)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed64 remote_steamid = 2;
    total_size += 1 + 8;

    // required uint32 version = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientHelloMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CClientHelloMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientHelloMsg::GetClassData() const { return &_class_data_; }


void CClientHelloMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CClientHelloMsg*>(&to_msg);
  auto& from = static_cast<const CClientHelloMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CClientHelloMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.remote_steamid_ = from._impl_.remote_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientHelloMsg::CopyFrom(const CClientHelloMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientHelloMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientHelloMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CClientHelloMsg::InternalSwap(CClientHelloMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientHelloMsg, _impl_.version_)
      + sizeof(CClientHelloMsg::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(CClientHelloMsg, _impl_.remote_steamid_)>(
          reinterpret_cast<char*>(&_impl_.remote_steamid_),
          reinterpret_cast<char*>(&other->_impl_.remote_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientHelloMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class CServerHelloMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CServerHelloMsg>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CServerHelloMsg::CServerHelloMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CServerHelloMsg)
}
CServerHelloMsg::CServerHelloMsg(const CServerHelloMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CServerHelloMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_steamid_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.remote_steamid_, &from._impl_.remote_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.remote_steamid_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:CServerHelloMsg)
}

inline void CServerHelloMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remote_steamid_){uint64_t{0u}}
    , decltype(_impl_.version_){0u}
  };
}

CServerHelloMsg::~CServerHelloMsg() {
  // @@protoc_insertion_point(destructor:CServerHelloMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CServerHelloMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CServerHelloMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CServerHelloMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CServerHelloMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.remote_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.remote_steamid_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CServerHelloMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required fixed64 remote_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_remote_steamid(&has_bits);
          _impl_.remote_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CServerHelloMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CServerHelloMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // required fixed64 remote_steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_remote_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CServerHelloMsg)
  return target;
}

size_t CServerHelloMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CServerHelloMsg)
  size_t total_size = 0;

  if (_internal_has_remote_steamid()) {
    // required fixed64 remote_steamid = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_version()) {
    // required uint32 version = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return total_size;
}
size_t CServerHelloMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CServerHelloMsg)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed64 remote_steamid = 2;
    total_size += 1 + 8;

    // required uint32 version = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CServerHelloMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CServerHelloMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CServerHelloMsg::GetClassData() const { return &_class_data_; }


void CServerHelloMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CServerHelloMsg*>(&to_msg);
  auto& from = static_cast<const CServerHelloMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CServerHelloMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.remote_steamid_ = from._impl_.remote_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CServerHelloMsg::CopyFrom(const CServerHelloMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CServerHelloMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CServerHelloMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CServerHelloMsg::InternalSwap(CServerHelloMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CServerHelloMsg, _impl_.version_)
      + sizeof(CServerHelloMsg::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(CServerHelloMsg, _impl_.remote_steamid_)>(
          reinterpret_cast<char*>(&_impl_.remote_steamid_),
          reinterpret_cast<char*>(&other->_impl_.remote_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CServerHelloMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class CMultiplexedMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMultiplexedMsg>()._impl_._has_bits_);
  static void set_has_msgtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMultiplexedMsg::CMultiplexedMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMultiplexedMsg)
}
CMultiplexedMsg::CMultiplexedMsg(const CMultiplexedMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMultiplexedMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamids_){from._impl_.steamids_}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.msgtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.msgtype_ = from._impl_.msgtype_;
  // @@protoc_insertion_point(copy_constructor:CMultiplexedMsg)
}

inline void CMultiplexedMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamids_){arena}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.msgtype_){0u}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMultiplexedMsg::~CMultiplexedMsg() {
  // @@protoc_insertion_point(destructor:CMultiplexedMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMultiplexedMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.steamids_.~RepeatedField();
  _impl_.payload_.Destroy();
}

void CMultiplexedMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMultiplexedMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMultiplexedMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steamids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.payload_.ClearNonDefaultToEmpty();
  }
  _impl_.msgtype_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMultiplexedMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 msgtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_msgtype(&has_bits);
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steamids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMultiplexedMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMultiplexedMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 msgtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgtype(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // repeated fixed64 steamids = 3;
  for (int i = 0, n = this->_internal_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMultiplexedMsg)
  return target;
}

size_t CMultiplexedMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMultiplexedMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_steamids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional uint32 msgtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMultiplexedMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMultiplexedMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMultiplexedMsg::GetClassData() const { return &_class_data_; }


void CMultiplexedMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMultiplexedMsg*>(&to_msg);
  auto& from = static_cast<const CMultiplexedMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMultiplexedMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.steamids_.MergeFrom(from._impl_.steamids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgtype_ = from._impl_.msgtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMultiplexedMsg::CopyFrom(const CMultiplexedMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMultiplexedMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMultiplexedMsg::IsInitialized() const {
  return true;
}

void CMultiplexedMsg::InternalSwap(CMultiplexedMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.steamids_.InternalSwap(&other->_impl_.steamids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.msgtype_, other->_impl_.msgtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMultiplexedMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// ===================================================================

class CSystemMessageMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CSystemMessageMsg>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSystemMessageMsg::CSystemMessageMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSystemMessageMsg)
}
CSystemMessageMsg::CSystemMessageMsg(const CSystemMessageMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSystemMessageMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CSystemMessageMsg)
}

inline void CSystemMessageMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSystemMessageMsg::~CSystemMessageMsg() {
  // @@protoc_insertion_point(destructor:CSystemMessageMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSystemMessageMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CSystemMessageMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSystemMessageMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSystemMessageMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSystemMessageMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSystemMessageMsg.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSystemMessageMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSystemMessageMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSystemMessageMsg.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSystemMessageMsg)
  return target;
}

size_t CSystemMessageMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSystemMessageMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSystemMessageMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSystemMessageMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSystemMessageMsg::GetClassData() const { return &_class_data_; }


void CSystemMessageMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSystemMessageMsg*>(&to_msg);
  auto& from = static_cast<const CSystemMessageMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSystemMessageMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSystemMessageMsg::CopyFrom(const CSystemMessageMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSystemMessageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSystemMessageMsg::IsInitialized() const {
  return true;
}

void CSystemMessageMsg::InternalSwap(CSystemMessageMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSystemMessageMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}

// ===================================================================

class CUpdateItemSchemaMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CUpdateItemSchemaMsg>()._impl_._has_bits_);
  static void set_has_items_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_items_game_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_items_game_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_online_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CUpdateItemSchemaMsg::CUpdateItemSchemaMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CUpdateItemSchemaMsg)
}
CUpdateItemSchemaMsg::CUpdateItemSchemaMsg(const CUpdateItemSchemaMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CUpdateItemSchemaMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_data_){}
    , decltype(_impl_.items_game_hash_){}
    , decltype(_impl_.items_game_url_){}
    , decltype(_impl_.use_online_backup_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.items_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.items_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_items_data()) {
    _this->_impl_.items_data_.Set(from._internal_items_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.items_game_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.items_game_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_items_game_hash()) {
    _this->_impl_.items_game_hash_.Set(from._internal_items_game_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.items_game_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.items_game_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_items_game_url()) {
    _this->_impl_.items_game_url_.Set(from._internal_items_game_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.use_online_backup_ = from._impl_.use_online_backup_;
  // @@protoc_insertion_point(copy_constructor:CUpdateItemSchemaMsg)
}

inline void CUpdateItemSchemaMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_data_){}
    , decltype(_impl_.items_game_hash_){}
    , decltype(_impl_.items_game_url_){}
    , decltype(_impl_.use_online_backup_){false}
  };
  _impl_.items_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.items_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.items_game_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.items_game_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.items_game_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.items_game_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CUpdateItemSchemaMsg::~CUpdateItemSchemaMsg() {
  // @@protoc_insertion_point(destructor:CUpdateItemSchemaMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CUpdateItemSchemaMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_data_.Destroy();
  _impl_.items_game_hash_.Destroy();
  _impl_.items_game_url_.Destroy();
}

void CUpdateItemSchemaMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CUpdateItemSchemaMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CUpdateItemSchemaMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.items_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.items_game_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.items_game_url_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.use_online_backup_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUpdateItemSchemaMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes items_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_items_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string items_game_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_items_game_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CUpdateItemSchemaMsg.items_game_hash");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string items_game_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_items_game_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CUpdateItemSchemaMsg.items_game_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool use_online_backup = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_use_online_backup(&has_bits);
          _impl_.use_online_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUpdateItemSchemaMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUpdateItemSchemaMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes items_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_items_data(), target);
  }

  // optional string items_game_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_items_game_hash().data(), static_cast<int>(this->_internal_items_game_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUpdateItemSchemaMsg.items_game_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_items_game_hash(), target);
  }

  // optional string items_game_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_items_game_url().data(), static_cast<int>(this->_internal_items_game_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUpdateItemSchemaMsg.items_game_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_items_game_url(), target);
  }

  // optional bool use_online_backup = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_use_online_backup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUpdateItemSchemaMsg)
  return target;
}

size_t CUpdateItemSchemaMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUpdateItemSchemaMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes items_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_items_data());
    }

    // optional string items_game_hash = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_items_game_hash());
    }

    // optional string items_game_url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_items_game_url());
    }

    // optional bool use_online_backup = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUpdateItemSchemaMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CUpdateItemSchemaMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUpdateItemSchemaMsg::GetClassData() const { return &_class_data_; }


void CUpdateItemSchemaMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CUpdateItemSchemaMsg*>(&to_msg);
  auto& from = static_cast<const CUpdateItemSchemaMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CUpdateItemSchemaMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_items_data(from._internal_items_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_items_game_hash(from._internal_items_game_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_items_game_url(from._internal_items_game_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.use_online_backup_ = from._impl_.use_online_backup_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUpdateItemSchemaMsg::CopyFrom(const CUpdateItemSchemaMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUpdateItemSchemaMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUpdateItemSchemaMsg::IsInitialized() const {
  return true;
}

void CUpdateItemSchemaMsg::InternalSwap(CUpdateItemSchemaMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.items_data_, lhs_arena,
      &other->_impl_.items_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.items_game_hash_, lhs_arena,
      &other->_impl_.items_game_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.items_game_url_, lhs_arena,
      &other->_impl_.items_game_url_, rhs_arena
  );
  swap(_impl_.use_online_backup_, other->_impl_.use_online_backup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUpdateItemSchemaMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}

// ===================================================================

class CUpdateLoadoutMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CUpdateLoadoutMsg>()._impl_._has_bits_);
  static void set_has_class_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CUpdateLoadoutMsg::CUpdateLoadoutMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CUpdateLoadoutMsg)
}
CUpdateLoadoutMsg::CUpdateLoadoutMsg(const CUpdateLoadoutMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CUpdateLoadoutMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inventory_){from._impl_.inventory_}
    , decltype(_impl_.class_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.class_id_ = from._impl_.class_id_;
  // @@protoc_insertion_point(copy_constructor:CUpdateLoadoutMsg)
}

inline void CUpdateLoadoutMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inventory_){arena}
    , decltype(_impl_.class_id_){0u}
  };
}

CUpdateLoadoutMsg::~CUpdateLoadoutMsg() {
  // @@protoc_insertion_point(destructor:CUpdateLoadoutMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CUpdateLoadoutMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inventory_.~RepeatedPtrField();
}

void CUpdateLoadoutMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CUpdateLoadoutMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CUpdateLoadoutMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inventory_.Clear();
  _impl_.class_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUpdateLoadoutMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required fixed32 class_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_class_id(&has_bits);
          _impl_.class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes inventory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inventory();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUpdateLoadoutMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUpdateLoadoutMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required fixed32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_class_id(), target);
  }

  // repeated bytes inventory = 2;
  for (int i = 0, n = this->_internal_inventory_size(); i < n; i++) {
    const auto& s = this->_internal_inventory(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUpdateLoadoutMsg)
  return target;
}

size_t CUpdateLoadoutMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUpdateLoadoutMsg)
  size_t total_size = 0;

  // required fixed32 class_id = 1;
  if (_internal_has_class_id()) {
    total_size += 1 + 4;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes inventory = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.inventory_.size());
  for (int i = 0, n = _impl_.inventory_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.inventory_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUpdateLoadoutMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CUpdateLoadoutMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUpdateLoadoutMsg::GetClassData() const { return &_class_data_; }


void CUpdateLoadoutMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CUpdateLoadoutMsg*>(&to_msg);
  auto& from = static_cast<const CUpdateLoadoutMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CUpdateLoadoutMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inventory_.MergeFrom(from._impl_.inventory_);
  if (from._internal_has_class_id()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUpdateLoadoutMsg::CopyFrom(const CUpdateLoadoutMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUpdateLoadoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUpdateLoadoutMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CUpdateLoadoutMsg::InternalSwap(CUpdateLoadoutMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.inventory_.InternalSwap(&other->_impl_.inventory_);
  swap(_impl_.class_id_, other->_impl_.class_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUpdateLoadoutMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[6]);
}

// ===================================================================

class CUpdateInventoryMsg::_Internal {
 public:
};

CUpdateInventoryMsg::CUpdateInventoryMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CUpdateInventoryMsg)
}
CUpdateInventoryMsg::CUpdateInventoryMsg(const CUpdateInventoryMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CUpdateInventoryMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inventory_){from._impl_.inventory_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CUpdateInventoryMsg)
}

inline void CUpdateInventoryMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inventory_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CUpdateInventoryMsg::~CUpdateInventoryMsg() {
  // @@protoc_insertion_point(destructor:CUpdateInventoryMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CUpdateInventoryMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inventory_.~RepeatedPtrField();
}

void CUpdateInventoryMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CUpdateInventoryMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CUpdateInventoryMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inventory_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUpdateInventoryMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CUpdateLoadoutMsg inventory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUpdateInventoryMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUpdateInventoryMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CUpdateLoadoutMsg inventory = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inventory_size()); i < n; i++) {
    const auto& repfield = this->_internal_inventory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUpdateInventoryMsg)
  return target;
}

size_t CUpdateInventoryMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUpdateInventoryMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CUpdateLoadoutMsg inventory = 1;
  total_size += 1UL * this->_internal_inventory_size();
  for (const auto& msg : this->_impl_.inventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUpdateInventoryMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CUpdateInventoryMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUpdateInventoryMsg::GetClassData() const { return &_class_data_; }


void CUpdateInventoryMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CUpdateInventoryMsg*>(&to_msg);
  auto& from = static_cast<const CUpdateInventoryMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CUpdateInventoryMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inventory_.MergeFrom(from._impl_.inventory_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUpdateInventoryMsg::CopyFrom(const CUpdateInventoryMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUpdateInventoryMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUpdateInventoryMsg::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.inventory_))
    return false;
  return true;
}

void CUpdateInventoryMsg::InternalSwap(CUpdateInventoryMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inventory_.InternalSwap(&other->_impl_.inventory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUpdateInventoryMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[7]);
}

// ===================================================================

class CLoadoutChangedMsg::_Internal {
 public:
};

CLoadoutChangedMsg::CLoadoutChangedMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CLoadoutChangedMsg)
}
CLoadoutChangedMsg::CLoadoutChangedMsg(const CLoadoutChangedMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CLoadoutChangedMsg* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CLoadoutChangedMsg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLoadoutChangedMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLoadoutChangedMsg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CLoadoutChangedMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CProtobufMsgHdr*
Arena::CreateMaybeMessage< ::CProtobufMsgHdr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtobufMsgHdr >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientHelloMsg*
Arena::CreateMaybeMessage< ::CClientHelloMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientHelloMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CServerHelloMsg*
Arena::CreateMaybeMessage< ::CServerHelloMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CServerHelloMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMultiplexedMsg*
Arena::CreateMaybeMessage< ::CMultiplexedMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMultiplexedMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CSystemMessageMsg*
Arena::CreateMaybeMessage< ::CSystemMessageMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSystemMessageMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CUpdateItemSchemaMsg*
Arena::CreateMaybeMessage< ::CUpdateItemSchemaMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUpdateItemSchemaMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CUpdateLoadoutMsg*
Arena::CreateMaybeMessage< ::CUpdateLoadoutMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUpdateLoadoutMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CUpdateInventoryMsg*
Arena::CreateMaybeMessage< ::CUpdateInventoryMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUpdateInventoryMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CLoadoutChangedMsg*
Arena::CreateMaybeMessage< ::CLoadoutChangedMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLoadoutChangedMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
